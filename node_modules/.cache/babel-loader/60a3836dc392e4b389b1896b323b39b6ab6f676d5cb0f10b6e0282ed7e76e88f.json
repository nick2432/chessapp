{"ast":null,"code":"var _jsxFileName = \"/home/nikhil/Desktop/new chess/fornt_end/src/component/timer.js\",\n  _s = $RefreshSig$();\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer() {\n  _s();\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const totalSeconds = mode === 'work' ? workMinutes * 60 : breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"lXltSTXCohDY6ZhUCCoXorjW/II=\");\n_c = Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useContext","useState","useEffect","useRef","CircularProgressbar","buildStyles","jsxDEV","_jsxDEV","Timer","_s","secondsLeft","setSecondsLeft","secondsLeftRef","totalSeconds","mode","workMinutes","breakMinutes","percentage","Math","round","minutes","floor","seconds","children","value","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nikhil/Desktop/new chess/fornt_end/src/component/timer.js"],"sourcesContent":["import {useContext, useState, useEffect, useRef} from \"react\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nexport default function Timer() {\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const totalSeconds = mode === 'work'\n    ? workMinutes * 60\n    : breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n  return (\n    <div>\n      <CircularProgressbar \n      value={percentage}\n      text={minutes + ':' + seconds}\n      />\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAAQA,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAC7D,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,4BAA4B;AAC7E,OAAO,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMW,cAAc,GAAGT,MAAM,CAACO,WAAW,CAAC;EAC1C,MAAMG,YAAY,GAAGC,IAAI,KAAK,MAAM,GAChCC,WAAW,GAAG,EAAE,GAChBC,YAAY,GAAG,EAAE;EACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACT,WAAW,GAAGG,YAAY,GAAG,GAAG,CAAC;EAE/D,MAAMO,OAAO,GAAGF,IAAI,CAACG,KAAK,CAACX,WAAW,GAAG,EAAE,CAAC;EAC5C,IAAIY,OAAO,GAAGZ,WAAW,GAAG,EAAE;EAC9B,IAAGY,OAAO,GAAG,EAAE,EAAEA,OAAO,GAAG,GAAG,GAACA,OAAO;EACtC,oBACEf,OAAA;IAAAgB,QAAA,eACEhB,OAAA,CAACH,mBAAmB;MACpBoB,KAAK,EAAEP,UAAW;MAClBQ,IAAI,EAAEL,OAAO,GAAG,GAAG,GAAGE;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC5B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAACpB,EAAA,CApBuBD,KAAK;AAAAsB,EAAA,GAALtB,KAAK;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}